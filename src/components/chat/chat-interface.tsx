'use client'

import { useState, useEffect, useRef, useCallback, useMemo } from 'react'
import { Message, Session } from '@/lib/supabase'
// import { getSessionMessages } from '@/lib/messages' // ÌòÑÏû¨ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå
import CharacterMessage, { UserMessage } from './character-message'
import { useRouter } from 'next/navigation'

import { getCharacter, COUNSELING_QUESTIONS } from '@/lib/characters'
import { CharacterType } from '@/types/characters'


interface ChatInterfaceProps {
  session: Session
  initialMessages: Message[]
  onSessionUpdate?: (session: Session) => void
}

export default function ChatInterface({ session, initialMessages, onSessionUpdate }: ChatInterfaceProps) {
  const router = useRouter()
  const [messages, setMessages] = useState<Message[]>(initialMessages)
  const [inputValue, setInputValue] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isTyping, setIsTyping] = useState(false)
  const [showAdvanceButtons, setShowAdvanceButtons] = useState(false)
  const [nextPhaseData, setNextPhaseData] = useState<any>(null)
  const [showWrapUpModal, setShowWrapUpModal] = useState(false)
  const [wrapUpSummary, setWrapUpSummary] = useState<string>('')
  const [wrapAction, setWrapAction] = useState<'next'|'more'|null>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLTextAreaElement>(null)
  const typingControllerRef = useRef<null | (() => void)>(null)
  const typingIntervalRef = useRef<NodeJS.Timeout | null>(null)
  const waitingTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const typingMessageIdRef = useRef<string | null>(null)
  const typingCounselorRef = useRef<CharacterType>('main')
  const prevQuestionIndexRef = useRef<number>(session.current_question_index)
  // Ïù∏ÏÇ¨/ÏöîÏ≤≠ Í≤ΩÌï© Î∞©ÏßÄÏö© Í∞ÄÎìú
  const greetingAbortRef = useRef<AbortController | null>(null)
  const greetingVersionRef = useRef<number>(0)
  const [isScrolledUp, setIsScrolledUp] = useState(false)
  const scrollRef = useRef<HTMLDivElement>(null)
  const clearTypingTimers = useCallback(() => {
    if (typingIntervalRef.current) clearInterval(typingIntervalRef.current)
    if (waitingTimeoutRef.current) clearTimeout(waitingTimeoutRef.current)
  }, [])

  // ÌòÑÏû¨ ÏßàÎ¨∏ Ï†ïÎ≥¥
  const currentQuestion = useMemo(() => {
    if (session.counseling_phase === 'questions' && session.current_question_index >= 1) {
      const questionIndex = session.current_question_index - 1
      return COUNSELING_QUESTIONS[questionIndex] || null
    }
    return null
  }, [session.counseling_phase, session.current_question_index])

  // ÌòÑÏû¨ ÏÉÅÎã¥ÏÇ¨ Í≤∞Ï†ï Î°úÏßÅ (ÏΩúÎ∞±ÏúºÎ°ú Ï†ïÏùòÌïòÏó¨ ÏùòÏ°¥ÏÑ± Í¥ÄÎ¶¨)
  const getCurrentCounselor = useCallback(() => {
    if (session.counseling_phase === 'summary' || session.counseling_phase === 'completed') {
      // ÏöîÏïΩ/ÏôÑÎ£å Îã®Í≥ÑÎäî Ï±ÑÌåÖÏùÑ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå
      return 'pink'
    }
    const questionIndex = session.current_question_index
    if (questionIndex >= 1 && questionIndex <= 8) {
      const question = COUNSELING_QUESTIONS[questionIndex - 1]
      return question.counselor
    }
    return 'yellow'
  }, [session.counseling_phase, session.current_question_index])

  // Ï≤´ ÏÉÅÎã¥ÏÇ¨ Ïù∏ÏÇ¨ Ìï®Ïàò
  const handleFirstCounselorGreeting = useCallback(async () => {
    // ÏöîÏïΩ/ÏôÑÎ£å Îã®Í≥ÑÏóêÏÑúÎäî Ï±ÑÌåÖ Ïù∏ÏÇ¨ Ìò∏Ï∂ú Í∏àÏßÄ, Î≥¥Í≥†ÏÑúÎ°ú Ï†ÑÌôò
    if (session.counseling_phase === 'summary' || session.counseling_phase === 'completed') {
      router.replace(`/session/${session.id}/report`)
      return
    }
    try {
      // Ïù¥Ï†Ñ Ïù∏ÏÇ¨ ÏöîÏ≤≠ Ï§ëÎã® Î∞è ÌÉÄÏù¥Ìïë ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
      if (greetingAbortRef.current) {
        try { greetingAbortRef.current.abort() } catch {}
      }
      if (typingIntervalRef.current) clearInterval(typingIntervalRef.current)
      typingControllerRef.current = null

      // ÏÉà Ïù∏ÏÇ¨ ÏöîÏ≤≠ Ï§ÄÎπÑ
      const aborter = new AbortController()
      greetingAbortRef.current = aborter
      const localVersion = ++greetingVersionRef.current

      setIsLoading(true)
      // Ï≤´ ÏÉÅÎã¥ ÏãúÏûë Ï¶âÏãú ÌÉÄÏù¥Ìïë ÎßêÌíçÏÑ† ÌëúÏãú(ÏÑúÎ≤Ñ ÏùëÎãµ Ï†Ñ)
      setIsTyping(true)
      typingMessageIdRef.current = `typing-greeting-${Date.now()}`
      {
        const qIdx = session.current_question_index
        const mapped = qIdx >= 1 && qIdx <= 8 ? (COUNSELING_QUESTIONS[qIdx - 1]?.counselor as CharacterType) : (getCurrentCounselor() as CharacterType)
        typingCounselorRef.current = mapped || 'main'
      }
      
      // Îπà Î©îÏãúÏßÄÎ°ú API Ìò∏Ï∂úÌïòÏó¨ ÏÉÅÎã¥ÏÇ¨Í∞Ä Î®ºÏ†Ä ÎßêÌïòÍ≤å Ìï®
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sessionId: session.id,
          message: '', // Îπà Î©îÏãúÏßÄ
          userId: session.user_id
        }),
        signal: aborter.signal,
      })

      // ÏôÑÎ£å/ÏöîÏïΩ ÏÉÅÌÉúÎ°ú Ï∞®Îã®Îêú Í≤ΩÏö∞ Ï¶âÏãú Î¶¨Ìè¨Ìä∏Î°ú Ïù¥Îèô
      if (response.status === 409) {
        try {
          const j = await response.json()
          router.replace(j?.redirect || `/session/${session.id}/report`)
          return
        } catch {
          router.replace(`/session/${session.id}/report`)
          return
        }
      }

      const data = await response.json()

      // ÏµúÏã† ÏöîÏ≤≠Îßå Î∞òÏòÅ
      if (localVersion !== greetingVersionRef.current) {
        return
      }

      if (data.success) {
        const aiResponse: Message = {
          id: `greeting-${Date.now()}`,
          session_id: session.id,
          user_id: session.user_id,
          role: 'assistant',
          content: '', // Ï≤òÏùåÏóêÎäî Îπà ÎÇ¥Ïö©ÏúºÎ°ú ÏãúÏûë
          counselor_id: data.counselor.type,
          created_at: new Date().toISOString()
        }
        
        // ÌÉÄÏù¥Ìïë Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º Ìï®Íªò Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        setMessages([{
          ...aiResponse,
          content: '' // Ï≤òÏùåÏóêÎäî Îπà ÎÇ¥Ïö©ÏúºÎ°ú ÏãúÏûë
        }])
        
        // ÏùºÎ∞ò Ï±ÑÌåÖ ÌÉÄÏù¥Ìïë: ÏÇ¨ÎûåÏ≤òÎüº ÎûúÎç§ ÏßÄÏó∞ + Ïò®Ï†êÏóêÏÑú ÏïΩÍ∞Ñ Ï∂îÍ∞Ä ÏßÄÏó∞
        let i = 0
        const full = data.response
        const finishTyping = () => { i = full.length + 1 }
        typingControllerRef.current = finishTyping
        const tempId = aiResponse.id
        typingMessageIdRef.current = tempId
        typingCounselorRef.current = (data.counselor.type as CharacterType) || 'main'

        const scheduleNext = () => {
          if (localVersion !== greetingVersionRef.current) {
            if (typingIntervalRef.current) clearTimeout(typingIntervalRef.current as any)
            typingControllerRef.current = null
            return
          }
          if (i <= full.length) {
            const display = full.slice(0, i)
            setMessages([{ ...aiResponse, id: tempId, content: display }])
            const prevChar = full.charAt(i - 1)
            // Í∏∞Î≥∏ 22~48ms, Ïò®Ï†ê/Î¨ºÏùåÌëúÏóêÏÑú 80~140ms Ï∂îÍ∞Ä ÏßÄÏó∞
            const base = 22 + Math.floor(Math.random() * 27)
            const extra = (prevChar === '.' || prevChar === '?') ? 80 + Math.floor(Math.random() * 61) : 0
            i++
            typingIntervalRef.current = setTimeout(scheduleNext, base + extra) as any
          } else {
            if (typingIntervalRef.current) clearTimeout(typingIntervalRef.current as any)
            typingControllerRef.current = null
            setMessages([{ ...aiResponse, id: tempId, content: full }])
            setIsTyping(false)
            typingMessageIdRef.current = null
            setTimeout(() => { inputRef.current?.focus() }, 100)
            // AIÍ∞Ä ÎãµÎ≥Ä ÌôïÏù∏ Ïã†Ìò∏Î•º Î≥¥ÎÇ∏ Í≤ΩÏö∞ ÏûêÎèô ÎßàÎ¨¥Î¶¨ Î™®Îã¨ ÌëúÏãú
            if (data.shouldAdvance && data.nextPhaseData) {
              const recent = [...messages, { role: 'assistant', content: full } as any].slice(-6)
              const bullets = recent
                .map(m => `${(m as any).role === 'user' ? 'üôç‚Äç‚ôÇÔ∏è' : 'ü§ñ'} ${String((m as any).content || '').trim()}`)
                .filter(Boolean)
              setWrapUpSummary(bullets.join('\n'))
              setShowWrapUpModal(true)
              setNextPhaseData(data.nextPhaseData)
            }
          }
        }
        scheduleNext()
      }
    } catch (error) {
      console.error('Ï≤´ Ïù∏ÏÇ¨ Ïò§Î•ò:', error)
    } finally {
      setIsLoading(false)
    }
  }, [session.id, session.user_id, session.current_question_index, getCurrentCounselor])

  // Ï¥àÍ∏∞ Î©îÏãúÏßÄ Î°úÎî©
  useEffect(() => {
    if (session.counseling_phase === 'summary' || session.counseling_phase === 'completed') {
      router.replace(`/session/${session.id}/report`)
      return
    }
    if (initialMessages.length === 0) {
      // Î©îÏãúÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ ÏÉÅÎã¥ÏÇ¨Í∞Ä Î®ºÏ†Ä Ïù∏ÏÇ¨
      handleFirstCounselorGreeting()
    }
  }, [initialMessages, handleFirstCounselorGreeting, session.counseling_phase, session.id, router])

  // ÏßàÎ¨∏ Ïù∏Îç±Ïä§ Î≥ÄÍ≤Ω Ïãú, Ïù¥Ï†Ñ ÏÉÅÎã¥ÏÇ¨ Î©îÏãúÏßÄÍ∞Ä ÎÇ®ÏßÄ ÏïäÎèÑÎ°ù Ï¥àÍ∏∞Ìôî ÌõÑ ÏÉà ÏÉÅÎã¥ÏÇ¨ Ïù∏ÏÇ¨
  useEffect(() => {
    if (prevQuestionIndexRef.current !== session.current_question_index) {
      prevQuestionIndexRef.current = session.current_question_index
      // ÏßÑÌñâ Ï§ë Ïù∏ÏÇ¨ ÏöîÏ≤≠ Î∞è ÌÉÄÏù¥Ìïë Ï§ëÎã®
      if (greetingAbortRef.current) {
        try { greetingAbortRef.current.abort() } catch {}
      }
      if (typingIntervalRef.current) clearInterval(typingIntervalRef.current)
      typingControllerRef.current = null
      setMessages([])
      setShowAdvanceButtons(false)
      setNextPhaseData(null)
      handleFirstCounselorGreeting()
    }
  }, [session.current_question_index, handleFirstCounselorGreeting])
  
  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò (Ìñ•ÌõÑ ÏÇ¨Ïö© ÏòàÏ†ï)

  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [])

  useEffect(() => {
    scrollToBottom()
  }, [messages, scrollToBottom])

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return

    const userMessage = inputValue.trim()
    setInputValue('')
    setIsLoading(true)
    // ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†ÑÏÜ°ÌïòÎäî Ï¶âÏãú ÏÉÅÎã¥ÏÇ¨ ÌÉÄÏù¥Ìïë ÎßêÌíçÏÑ† ÌëúÏãú
    try {
      setIsTyping(true)
      typingMessageIdRef.current = `typing-${Date.now()}`
      typingCounselorRef.current = (getCurrentCounselor() as CharacterType) || 'main'
    } catch {}

    try {
      // ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÎ•º Ï¶âÏãú UIÏóê Ï∂îÍ∞Ä
      const newUserMessage: Message = {
        id: `temp-${Date.now()}`,
        session_id: session.id,
        user_id: session.user_id,
        role: 'user',
        content: userMessage,
        created_at: new Date().toISOString()
      }
      setMessages(prev => [...prev, newUserMessage])

      // API Ìò∏Ï∂ú
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sessionId: session.id,
          message: userMessage,
          userId: session.user_id
        }),
      })

      // ÏôÑÎ£å/ÏöîÏïΩ ÏÉÅÌÉúÎ°ú Ï∞®Îã®Îêú Í≤ΩÏö∞ Ï¶âÏãú Î¶¨Ìè¨Ìä∏Î°ú Ïù¥Îèô
      if (response.status === 409) {
        try {
          const j = await response.json()
          router.replace(j?.redirect || `/session/${session.id}/report`)
          return
        } catch {
          router.replace(`/session/${session.id}/report`)
          return
        }
      }

      const data = await response.json()

      if (data.success) {
        setIsTyping(true)
        const aiResponse: Message = {
          id: `ai-${Date.now()}`,
          session_id: session.id,
          user_id: session.user_id,
          role: 'assistant',
          content: data.response,
          counselor_id: data.counselor.type,
          created_at: new Date().toISOString()
        }
        // ÌÉÄÏù¥Ìïë Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º Ìï®Íªò Î©îÏãúÏßÄ Ï∂îÍ∞Ä
        const tempMessage: Message = {
          ...aiResponse,
          content: '' // Ï≤òÏùåÏóêÎäî Îπà ÎÇ¥Ïö©ÏúºÎ°ú ÏãúÏûë
        }
        setMessages(prev => [...prev, tempMessage])
        
        // ÏùºÎ∞ò Ï±ÑÌåÖ ÌÉÄÏù¥Ìïë(ÏùëÎãµ): ÏÇ¨ÎûåÏ≤òÎüº ÎûúÎç§ ÏßÄÏó∞ + Ïò®Ï†ê Ï∂îÍ∞Ä ÏßÄÏó∞
        let i = 0
        const full = data.response
        const tempId = aiResponse.id
        const finishTyping = () => { i = full.length + 1 }
        typingControllerRef.current = finishTyping
        const tempCounselor = (data.counselor.type as CharacterType) || 'main'
        typingMessageIdRef.current = tempId
        typingCounselorRef.current = tempCounselor

        const scheduleNext = () => {
          if (i <= full.length) {
            const display = full.slice(0, i)
            setMessages(prev => prev.map(msg => msg.id === tempId ? { ...msg, content: display } : msg))
            const prevChar = full.charAt(i - 1)
            const base = 22 + Math.floor(Math.random() * 27)
            const extra = (prevChar === '.' || prevChar === '?') ? 80 + Math.floor(Math.random() * 61) : 0
            i++
            typingIntervalRef.current = setTimeout(scheduleNext, base + extra) as any
          } else {
            if (typingIntervalRef.current) clearTimeout(typingIntervalRef.current as any)
            typingControllerRef.current = null
            setMessages(prev => prev.map(msg => msg.id === tempId ? { ...msg, content: full } : msg))
            setIsTyping(false)
            typingMessageIdRef.current = null
            setTimeout(() => { inputRef.current?.focus() }, 100)
            console.log('üîç API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', { shouldAdvance: data.shouldAdvance, nextPhaseData: data.nextPhaseData })
            if (data.shouldAdvance && data.nextPhaseData) {
              const recent = [...messages, { role: 'assistant', content: full } as any].slice(-6)
              const bullets = recent
                .map(m => `${(m as any).role === 'user' ? 'üôç‚Äç‚ôÇÔ∏è' : 'ü§ñ'} ${String((m as any).content || '').trim()}`)
                .filter(Boolean)
              setWrapUpSummary(bullets.join('\n'))
              setShowWrapUpModal(true)
              setNextPhaseData(data.nextPhaseData)
            }
          }
        }
        scheduleNext()
      } else {
        throw new Error(data.error)
      }
    } catch (error) {
      console.error('Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò:', error)
      alert('Î©îÏãúÏßÄ Ï†ÑÏÜ°Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    } finally {
      setIsLoading(false)
      if (typingControllerRef.current === null && typingIntervalRef.current === null) {
        // Ïã§Ìå® Îì±ÏúºÎ°ú ÏùëÎãµÏù¥ Ïò§ÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÌÉÄÏù¥Ìïë ÎßêÌíçÏÑ† Ï†ïÎ¶¨
        setIsTyping(false)
        typingMessageIdRef.current = null
      }
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleAdvanceToNext = async (confirmed: boolean) => {
    if (!nextPhaseData) return

    try {
      setIsLoading(true)
      
      if (confirmed) {
        // "Ïùë, ÎßûÏïÑ!" - Îã§Ïùå Îã®Í≥ÑÎ°ú ÏßÑÌñâ
        const response = await fetch(`/api/session/${session.id}/advance`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            nextPhase: nextPhaseData.nextPhase,
            nextQuestionIndex: nextPhaseData.nextQuestionIndex,
            userAnswer: messages[messages.length - 2]?.content // ÎßàÏßÄÎßâ ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ
          }),
        })

        const data = await response.json()

        if (data.success) {
          // ÏÑ∏ÏÖò ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏Î•º Î∂ÄÎ™®ÏóêÍ≤å ÏïåÎ¶º
          if (onSessionUpdate) {
            const updatedSession = {
              ...session,
              counseling_phase: nextPhaseData.nextPhase,
              current_question_index: nextPhaseData.nextQuestionIndex
            }
            onSessionUpdate(updatedSession)
          }
          
          // ÏöîÏïΩ Îã®Í≥ÑÎ©¥ Ï¶âÏãú Î¶¨Ìè¨Ìä∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
          if (nextPhaseData.nextPhase === 'summary') {
            setShowAdvanceButtons(false)
            setNextPhaseData(null)
            router.push(`/session/${session.id}/report`)
            return
          }

          // Ï±ÑÌåÖÏ∞Ω ÎπÑÏö∞Í∏∞
          setMessages([])
          
          // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
          setShowAdvanceButtons(false)
          setNextPhaseData(null)
          
          // ÏûÖÎ†•Ï∞ΩÏóê Ìè¨Ïª§Ïä§
          setTimeout(() => {
            inputRef.current?.focus()
          }, 100)
          
          // ÏÉàÎ°úÏö¥ ÏÉÅÎã¥ÏÇ¨Ïùò Ï≤´ Ïù∏ÏÇ¨ ÏöîÏ≤≠
          handleFirstCounselorGreeting()
        } else {
          throw new Error(data.error)
        }
      } else {
        // "Ï°∞Í∏à Îçî ÏÉùÍ∞ÅÌï¥Î≥ºÍ≤å" - Í≤©Î†§ Î©îÏãúÏßÄ Î∞õÍ∏∞
        const currentCounselor = getCurrentCounselor()
        const response = await fetch(`/api/session/${session.id}/encourage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            counselorType: currentCounselor
          }),
        })

        const data = await response.json()

        if (data.success) {
          const encouragementMessage: Message = {
            id: `encouragement-${Date.now()}`,
            session_id: session.id,
            user_id: session.user_id,
            role: 'assistant',
            content: data.message,
            counselor_id: currentCounselor,
            created_at: new Date().toISOString()
          }
          
          setMessages(prev => [...prev, encouragementMessage])
          setShowAdvanceButtons(false)
          setNextPhaseData(null)
        } else {
          throw new Error(data.error)
        }
      }
    } catch (error) {
      console.error('Îã®Í≥Ñ ÏßÑÌñâ Ïò§Î•ò:', error)
      alert('Îã®Í≥Ñ ÏßÑÌñâÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    } finally {
      setIsLoading(false)
    }
  }

  const buildWrapUpSummary = useCallback(() => {
    // ÏµúÍ∑º ÎåÄÌôî(ÌòÑÏû¨ ÏÉÅÎã¥ÏÇ¨ Ï§ëÏã¨ÏúºÎ°ú)ÏóêÏÑú ÌïµÏã¨ Î¨∏Ïû• Î™á Í∞úÎ•º Î™®ÏïÑ Í∞ÑÎã® ÏöîÏïΩ ÏÉùÏÑ±
    const maxItems = 6
    const recent = [...messages].slice(-maxItems)
    const bullets = recent
      .map(m => `${m.role === 'user' ? 'üôç‚Äç‚ôÇÔ∏è' : 'ü§ñ'} ${String(m.content || '').trim()}`)
      .filter(Boolean)
    const text = bullets.join('\n')
    return text.length > 0 ? text : 'ÎåÄÌôî ÏöîÏïΩÏùÑ ÏÉùÏÑ±Ìï† ÎÇ¥Ïö©Ïù¥ Ï∂©Î∂ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏûêÏú†Î°≠Í≤å Îã§Ïùå ÏßàÎ¨∏ÏúºÎ°ú ÏßÑÌñâÌïòÏÖîÎèÑ Ï¢ãÏäµÎãàÎã§.'
  }, [messages])

  const handleOpenWrapUp = useCallback(() => {
    const sum = buildWrapUpSummary()
    setWrapUpSummary(sum)
    setShowWrapUpModal(true)
  }, [buildWrapUpSummary])

  const handleWrapUpDecision = useCallback(async (goNext: boolean) => {
    if (goNext) {
      try {
        setWrapAction('next')
        setIsLoading(true)
        const isLastQuestion = (session.current_question_index || 1) >= 8
        if (isLastQuestion) {
          // ÎßàÏßÄÎßâ ÏßàÎ¨∏Ïù¥Î©¥ ÏöîÏïΩ Îã®Í≥ÑÎ°ú Ïù¥Îèô
          const response = await fetch(`/api/session/${session.id}/advance`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ nextPhase: 'summary', nextQuestionIndex: 8 })
          })
          const data = await response.json()
          if (data.success) {
            setShowWrapUpModal(false)
            router.push(`/session/${session.id}/report`)
            return
          } else {
            throw new Error(data.error)
          }
        }

        // ÎßàÏßÄÎßâÏù¥ ÏïÑÎãàÎ©¥ Îã§Ïùå ÏßàÎ¨∏ÏúºÎ°ú ÏßÑÌñâ
        const nextIdx = Math.min((session.current_question_index || 1) + 1, 8)
        const response = await fetch(`/api/session/${session.id}/advance`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ nextPhase: 'questions', nextQuestionIndex: nextIdx })
        })
        const data = await response.json()
        if (data.success) {
          if (onSessionUpdate) {
            onSessionUpdate({ ...session, counseling_phase: 'questions', current_question_index: nextIdx } as Session)
          }
          setMessages([])
          setShowWrapUpModal(false)
          handleFirstCounselorGreeting()
        } else {
          throw new Error(data.error)
        }
      } catch (e) {
        console.error('Îã§Ïùå Îã®Í≥Ñ ÏßÑÌñâ Ïò§Î•ò:', e)
        alert('ÏßÑÌñâÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      } finally {
        setWrapAction(null)
        setIsLoading(false)
      }
    } else {
      // ÏïÑÏßÅ Ïù¥ÏïºÍ∏∞ ÎÇ®Ïùå ‚Üí ÌòÑÏû¨ ÏÉÅÎã¥ÏÇ¨ Í≤©Î†§ Î©îÏãúÏßÄ ÏöîÏ≤≠
      try {
        setWrapAction('more')
        setIsLoading(true)
        const currentCounselor = getCurrentCounselor()
        const response = await fetch(`/api/session/${session.id}/encourage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ counselorType: currentCounselor })
        })
        const data = await response.json()
        if (data.success) {
          const encouragementMessage: Message = {
            id: `encouragement-${Date.now()}`,
            session_id: session.id,
            user_id: session.user_id,
            role: 'assistant',
            content: data.message,
            counselor_id: getCurrentCounselor(),
            created_at: new Date().toISOString()
          }
          setMessages(prev => [...prev, encouragementMessage])
        }
      } finally {
        setWrapAction(null)
        setIsLoading(false)
        setShowWrapUpModal(false)
      }
    }
  }, [session, onSessionUpdate, getCurrentCounselor, handleFirstCounselorGreeting])

  

  // ÏµúÏã† ÏÉÅÎã¥ÏÇ¨ Î¨∏Ïû• (Ïò®Î≥¥Îî© Ïä§ÌÉÄÏùº ÌëúÏãúÏö©)
  const getLatestAssistantText = useCallback(() => {
    for (let i = messages.length - 1; i >= 0; i--) {
      if (messages[i].role === 'assistant') return messages[i].content || ''
    }
    return ''
  }, [messages])

  const handleScroll = useCallback(() => {
    const el = scrollRef.current
    if (!el) return
    const distanceFromBottom = el.scrollHeight - el.scrollTop - el.clientHeight
    const atBottom = distanceFromBottom <= 8
    setIsScrolledUp(!atBottom)
  }, [])

  

  return (
    <div className="flex flex-col h-full bg-transparent">
      {/* Î©îÏù∏ Ïä§ÌÅ¨Î°§ ÏòÅÏó≠ */}
      <div className="flex-1 overflow-y-auto bg-transparent pt-28" ref={scrollRef} onScroll={handleScroll} style={{ WebkitOverflowScrolling: 'touch' }}>
        <div className="max-w-4xl w-full px-4 sm:px-6 pb-32 mx-auto space-y-3">
          {messages.map((message) => {
            if (message.role === 'user') {
              return <UserMessage key={message.id} message={message.content} timestamp={message.created_at} />
            } else {
              const character = getCharacter((message.counselor_id as CharacterType) || 'main')
              return <CharacterMessage key={message.id} character={character} message={message.content} timestamp={message.created_at} showTypingEffect={false} />
            }
          })}
          {/* ÏÉÅÎã¥ÏÇ¨ ÌÉÄÏù¥Ìïë ÌëúÏãú ÎßêÌíçÏÑ† */}
          {(() => {
            if (!isTyping || !typingMessageIdRef.current) return null
            const inProgress = messages.find(m => m.id === typingMessageIdRef.current)
            const hasStarted = !!(inProgress && inProgress.content && inProgress.content.length > 0)
            if (hasStarted) return null
            return (
              <CharacterMessage
                key={`${typingMessageIdRef.current}-typing`}
                character={getCharacter(typingCounselorRef.current)}
                message=""
                isTyping={true}
                showTypingEffect={false}
              />
            )
          })()}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* ÎãµÎ≥Ä ÌôïÏù∏ Î≤ÑÌäºÎì§ - Ï†ÑÏ≤¥ ÌôîÎ©¥ */}
      {showAdvanceButtons && nextPhaseData && (
        <div className="fixed inset-0 bg-white z-50 flex flex-col">
          <div className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-2xl mx-auto">
              <div className="mb-8">
                <h3 className="text-xl font-semibold text-gray-900 mb-2">ÎãµÎ≥Ä ÌôïÏù∏</h3>
                <p className="text-sm text-gray-600">ÌòÑÏû¨ ÏßàÎ¨∏Í≥º Î∞©Í∏à Ï†ïÎ¶¨Îêú ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.</p>
              </div>

              {/* ÌòÑÏû¨ ÏßàÎ¨∏ */}
              {currentQuestion && (
                <div className="border border-gray-200 rounded-xl p-6 mb-6 bg-white">
                  <p className="text-xs text-gray-500 mb-2">ÌòÑÏû¨ ÏßàÎ¨∏</p>
                  <p className="text-lg font-medium text-gray-900">"{currentQuestion.text}"</p>
                </div>
              )}

              {/* ÎßàÏßÄÎßâÏóê ÌïòÏù¥ÎùºÏù¥Ìä∏ Îêú ÎãµÎ≥Ä */}
              {messages.length > 0 && (() => {
                const lastMessage = messages[messages.length - 1];
                const answerReadyMatch = lastMessage.content.match(/\*\*\[ANSWER_READY\]\*\*([\s\S]*?)\*\*\[ANSWER_READY\]\*\*/);
                return answerReadyMatch ? (
                  <div className="border border-gray-200 rounded-xl p-6 mb-8 bg-white">
                    <p className="text-xs text-gray-500 mb-2">ÎÇ¥ ÎãµÎ≥Ä</p>
                    <div className="text-xl text-gray-900 leading-relaxed whitespace-pre-line">üí° {answerReadyMatch[1]}</div>
                  </div>
                ) : null;
              })()}
            </div>
          </div>

          {/* ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠ */}
          <div className="border-t border-gray-200 p-6 bg-white">
            <div className="max-w-md mx-auto flex justify-center gap-3">
              <button
                onClick={() => handleAdvanceToNext(true)}
                disabled={isLoading}
                className="btn btn-primary text-white px-8 py-3 rounded-full text-base disabled:opacity-50"
              >
                ÎÑ§, ÎßûÏïÑÏöî! üéØ
              </button>
              <button
                onClick={() => handleAdvanceToNext(false)}
                disabled={isLoading}
                className="btn px-8 py-3 rounded-full text-base disabled:opacity-50"
              >
                Ï¢Ä Îçî ÏÉùÍ∞ÅÌï¥Î≥ºÍ≤åÏöî ü§î
              </button>
            </div>
          </div>
        </div>
      )}

      {/* ÌïòÎã® Í≥†Ï†ï Î∞î: Ïä§ÌÅ¨Î°§ ÏóÖ Ïãú Ïà®ÍπÄ (Î∞îÍπ• Î†àÏù¥ÏïÑÏõÉ ÏòÅÌñ• ÏóÜÎèÑÎ°ù) */}
      <div className={`fixed bottom-0 left-0 right-0 px-4 py-4 bg-white/50 backdrop-blur-xl border-t border-white/20 transition-transform transition-opacity duration-200 will-change-transform ${(isScrolledUp || isTyping) ? 'opacity-0 pointer-events-none translate-y-2' : 'opacity-100 translate-y-0'}`}>
        {/* Quick Actions removed per spec */}
        <div className="max-w-4xl mx-auto flex items-end gap-3">
          <textarea
            ref={inputRef}
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="ÏÜîÏßÅÌïú ÎßàÏùåÏùÑ Ìé∏ÌïòÍ≤å ÎßêÌï¥Ï£ºÏÑ∏Ïöî..."
            aria-label="Î©îÏãúÏßÄ ÏûÖÎ†•"
            className="input resize-none flex-1 bg-white/70 border-white/30 text-gray-900 placeholder-gray-600 py-4 px-6 rounded-full focus:ring-2 focus:ring-purple-400/50 focus:border-transparent text-base backdrop-blur-sm"
            rows={2}
            disabled={isLoading || isTyping}
          />
          <button
            onClick={handleOpenWrapUp}
            disabled={isLoading || isTyping}
            className="btn px-4 rounded-full"
            aria-label="ÎåÄÌôî ÎßàÎ¨¥Î¶¨"
            title="ÎåÄÌôî ÎßàÎ¨¥Î¶¨"
          >
            ÎßàÎ¨¥Î¶¨
          </button>
          <button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isLoading || isTyping}
            className="px-6 py-4 rounded-full min-w-[60px] bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:opacity-50 disabled:cursor-not-allowed text-white"
            aria-label="Î©îÏãúÏßÄ Ï†ÑÏÜ°"
          >
            ‚ñ≤
          </button>
        </div>
        {!isScrolledUp && (
          <div className="mt-2 text-[11px] text-gray-500 text-center">Enter Ï†ÑÏÜ° ‚Ä¢ Shift+Enter Ï§ÑÎ∞îÍøà</div>
        )}
      </div>

      {/* Ïä§ÌÅ¨Î°§ ÏóÖ Ïãú Îñ†ÏûàÎäî Îß® ÏïÑÎûòÎ°ú Î≤ÑÌäº */}
      {isScrolledUp && !isTyping && (
        <button
          onClick={() => {
            const el = scrollRef.current
            if (!el) return
            el.scrollTo({ top: el.scrollHeight, behavior: 'smooth' })
          }}
          className="fixed bottom-6 left-1/2 -translate-x-1/2 z-50 btn px-4 py-2 rounded-full"
        >
          Îß® ÏïÑÎûòÎ°ú
        </button>
      )}

      {/* ÎåÄÌôî ÎßàÎ¨¥Î¶¨ Î™®Îã¨ */}
      {showWrapUpModal && (
        <div className="fixed inset-0 bg-black/30 z-50 flex items-center justify-center">
          <div className="bg-white rounded-2xl border border-gray-200 max-w-2xl w-full mx-4 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">ÎåÄÌôî ÏöîÏïΩ</h3>
            <div className="border border-gray-200 rounded-xl p-4 bg-white mb-4 max-h-64 overflow-auto whitespace-pre-line text-gray-800 text-sm">
              {wrapUpSummary}
            </div>
            <p className="text-sm text-gray-700 mb-4">
              { (session.current_question_index || 1) >= 8
                ? 'Ï∂©Î∂ÑÌûà ÎåÄÌôîÌïú Í≤É Í∞ôÎÇòÏöî? Ï∂©Î∂ÑÌïòÎã§Î©¥ ÏöîÏïΩÏúºÎ°ú ÎÑòÏñ¥Í∞ëÏãúÎã§.'
                : 'Ï∂©Î∂ÑÌûà ÎåÄÌôîÌïú Í≤É Í∞ôÎÇòÏöî? Ï∂©Î∂ÑÌïòÎã§Î©¥ Îã§Ïùå ÏßàÎ¨∏ÏúºÎ°ú ÎÑòÏñ¥Í∞ëÏãúÎã§.'
              }
            </p>
            <div className="flex justify-end gap-2">
              <button
                onClick={() => handleWrapUpDecision(false)}
                disabled={isLoading}
                className="btn px-4 py-2 rounded-full"
              >
                {isLoading && wrapAction === 'more' ? (
                  <span className="inline-flex items-center gap-1">
                    <span className="dot" />
                    <span className="dot" />
                    <span className="dot" />
                  </span>
                ) : 'ÏïÑÏßÅ Ìï† Ïù¥ÏïºÍ∏∞Í∞Ä ÎÇ®ÏïòÏñ¥Ïöî'}
              </button>
              <button
                onClick={() => handleWrapUpDecision(true)}
                disabled={isLoading}
                className="btn btn-primary text-white px-4 py-2 rounded-full"
              >
                {isLoading && wrapAction === 'next' ? (
                  <span className="inline-flex items-center gap-1">
                    <span className="dot dot1" />
                    <span className="dot dot2" />
                    <span className="dot dot3" />
                  </span>
                ) : ((session.current_question_index || 1) >= 8 ? 'Ïòà, ÏöîÏïΩÏúºÎ°ú' : 'Ïòà, Îã§Ïùå ÏßàÎ¨∏ÏúºÎ°ú')}
              </button>
              <style jsx>{`
                @keyframes dotsBlink { 0%, 60%, 100% { opacity: 0.2 } 30% { opacity: 1 } }
                .dot { width: 6px; height: 6px; background: currentColor; border-radius: 9999px; display: inline-block; animation: dotsBlink 1.2s infinite ease-in-out; }
                .dot1 { animation-delay: 0s }
                .dot2 { animation-delay: 0.2s }
                .dot3 { animation-delay: 0.4s }
              `}</style>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}